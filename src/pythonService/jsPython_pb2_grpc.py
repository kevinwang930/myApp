# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import jsPython_pb2 as jsPython__pb2


class CommunicationStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sayHello = channel.unary_unary(
                '/jsPython.Communication/sayHello',
                request_serializer=jsPython__pb2.HelloRequest.SerializeToString,
                response_deserializer=jsPython__pb2.HelloReply.FromString,
                )
        self.orderExcelReport = channel.unary_unary(
                '/jsPython.Communication/orderExcelReport',
                request_serializer=jsPython__pb2.orderExportRequest.SerializeToString,
                response_deserializer=jsPython__pb2.orderExportReply.FromString,
                )
        self.supplierPdfReport = channel.unary_unary(
                '/jsPython.Communication/supplierPdfReport',
                request_serializer=jsPython__pb2.supplierReportRequest.SerializeToString,
                response_deserializer=jsPython__pb2.resultWithMessage.FromString,
                )


class CommunicationServicer(object):
    """The greeting service definition.
    """

    def sayHello(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def orderExcelReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def supplierPdfReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommunicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.sayHello,
                    request_deserializer=jsPython__pb2.HelloRequest.FromString,
                    response_serializer=jsPython__pb2.HelloReply.SerializeToString,
            ),
            'orderExcelReport': grpc.unary_unary_rpc_method_handler(
                    servicer.orderExcelReport,
                    request_deserializer=jsPython__pb2.orderExportRequest.FromString,
                    response_serializer=jsPython__pb2.orderExportReply.SerializeToString,
            ),
            'supplierPdfReport': grpc.unary_unary_rpc_method_handler(
                    servicer.supplierPdfReport,
                    request_deserializer=jsPython__pb2.supplierReportRequest.FromString,
                    response_serializer=jsPython__pb2.resultWithMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jsPython.Communication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Communication(object):
    """The greeting service definition.
    """

    @staticmethod
    def sayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jsPython.Communication/sayHello',
            jsPython__pb2.HelloRequest.SerializeToString,
            jsPython__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def orderExcelReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jsPython.Communication/orderExcelReport',
            jsPython__pb2.orderExportRequest.SerializeToString,
            jsPython__pb2.orderExportReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def supplierPdfReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jsPython.Communication/supplierPdfReport',
            jsPython__pb2.supplierReportRequest.SerializeToString,
            jsPython__pb2.resultWithMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
